(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function(){
	"use strict";

	/* @ngInject */
  module.exports = function ($mdThemingProvider, $mdIconProvider){

		var blueVCmap = $mdThemingProvider.extendPalette('blue', {
			'100': '#E0F2FA',
			'200': '#AFDDF3',
			'300': '#71C3E9',
			'400': '#57B7E5',
	    '500': '#3CACE1',
			'600': '#22A1DC',
			'700': '#1E8DC2',
			'800': '#1A7AA7',
			'900': '#16678D',
			'A100': '#AFDDF3',
			'A200': '#3CACE1',
			'A400': '#57B7E5',
			'A700': '#1E8DC2'
	  });
	  $mdThemingProvider.definePalette('blueVC', blueVCmap);

		$mdThemingProvider.theme('default')
	    .primaryPalette('grey')
	    .accentPalette('blueVC')
	    .warnPalette('red')
	    ;


	  $mdIconProvider
      .icon('add', '/contactNetConfig/assets/icons/add.svg')
      .icon('arrow_downward', '/contactNetConfig/assets/icons/arrow_downward.svg')
      .icon('arrow_upward', '/contactNetConfig/assets/icons/arrow_upward.svg')
      .icon('menu', '/contactNetConfig/assets/icons/menu.svg')
      .icon('more_vert', '/contactNetConfig/assets/icons/more_vert.svg')
      .icon('contactnets', '/contactNetConfig/assets/icons/contactnets.svg')
      .icon('channels', '/contactNetConfig/assets/icons/channels.svg')
      .icon('rules', '/contactNetConfig/assets/icons/rules.svg')
			.icon('twitter', '/contactNetConfig/assets/icons/twitter.svg')
      .icon('mail', '/contactNetConfig/assets/icons/mail.svg')
      .icon('message', '/contactNetConfig/assets/icons/message.svg')
      .icon('phone', '/contactNetConfig/assets/icons/phone.svg')
      .icon('shape', '/contactNetConfig/assets/icons/shape.svg')
      .icon('insert', '/contactNetConfig/assets/icons/insert-drive-file.svg')
      .icon('edit', '/contactNetConfig/assets/icons/edit.svg')
      .icon('search', '/contactNetConfig/assets/icons/search.svg')
			.icon('delete', '/contactNetConfig/assets/icons/delete.svg')
			.icon('repos', '/contactNetConfig/assets/icons/repos.svg')
			.icon('skills', '/contactNetConfig/assets/icons/skills.svg')
			.icon('pause_state', '/contactNetConfig/assets/icons/pause_state.svg')
			.icon('school', '/contactNetConfig/assets/icons/school.svg')
			.icon('local_offer', '/contactNetConfig/assets/icons/local_offer.svg')
			.icon('content_copy', '/contactNetConfig/assets/icons/content_copy.svg')
			;

  }
  module.exports.$inject = ["$mdThemingProvider", "$mdIconProvider"];

})();

},{}],2:[function(require,module,exports){
(function () {
	"use strict";

	var cnChannels = require('./modules/channels/');
	var cnContactNets = require('./modules/contactNets/');
	var cnRepos = require('./modules/repos/');
	var cnCore = require('./modules/core/');
	var cnRules = require('./modules/rules/');

	var modules = [
		'ui.router', 
	  'ngSanitize', 
	  'ngAnimate',
	  'ngAria',
	  'ngMaterial',
	  cnCore.name,
	  cnChannels.name,
	  cnContactNets.name,
	  cnRepos.name,
	  cnRules.name
	];

	/**
	* @ngdoc overview
	* @name index
	*
	* @description
	*
	* # Virtual Center Config
	*   
	*
	*/

	angular
	.module('virtual-center', modules)
	.config(require('./app.route.js'))
	.config(require('./app.config.js'))
	;

}());
},{"./app.config.js":1,"./app.route.js":3,"./modules/channels/":5,"./modules/contactNets/":16,"./modules/core/":31,"./modules/repos/":49,"./modules/rules/":55}],3:[function(require,module,exports){
(function(){
	
	"use strict";

  /* @ngInject */
  module.exports = function ($stateProvider, $urlRouterProvider){

		$stateProvider
			.state('contactnets', {
				// url: "/",
				abstract:true,
				templateUrl: "/contactNetConfig/layout.html",
				// controller: "contactNetsController"
			})
			.state('contactnets.contatNetConfig', {
				url: "/contactnets",
				templateUrl: "/contactNetConfig/modules/contactNets/contactNets.html",
				controller: "contactNetsController"
			})
			.state('contactnets.channels', {
				url: "/channels",
				templateUrl: "/contactNetConfig/modules/channels/channels.html",
				controller: "channelsController"
			})
			.state('contactnets.rules', {
				url: "/rules",
				templateUrl: "/contactNetConfig/modules/rules/rules.html",
				controller: "rulesController"
			})
			.state('contactnets.repos', {
				url: "/repos",
				templateUrl: "/contactNetConfig/modules/repos/repos.html",
				controller: "reposController"
			});

		$urlRouterProvider.otherwise("/contactnets");
			
  }
  module.exports.$inject = ["$stateProvider", "$urlRouterProvider"];

}());

},{}],4:[function(require,module,exports){
(function(){
	'use strict';

  /* @ngInject */
	module.exports = function ($rootScope, $scope, $cnContactNets, $cnChannels, $filter, $mdDialog) {

  	$scope.contactNets = [];
  	$scope.colorOptions = ['FFFFFF', 'FF8A80', 'FFD180', 'FFFF8D', 'CFD8DC', '80D8FF', 'A7FFEB', 'CCFF90'];
  	$scope.scriptCode = '<script>console.log("empty");</script>'
    $scope.$cnChannels = $cnChannels;

		$scope.save = save;
		$scope.remove = remove;
		$scope.openFab = openFab;

    $rootScope.fab.trigger.action = function(){};
		$rootScope.fab.actions = [{
			icon: 'phone',
			action: newPhone
		},{
			icon: 'message',
			action: newChat
		},{
			icon: 'mail',
			action: newMail
		}];

    if(!$scope.$cnChannels.channels.length){
      $scope.loading = true;
    }

  	$cnChannels.get().then(function () {
      $scope.$cnChannels.channels = arguments[0];
      $scope.loading = false;
  	});


		function newPhone(){
			var args = arguments;
			$mdDialog.show(
	      $mdDialog.alert()
	        .clickOutsideToClose(true)
	        .title('Acción no permitida')
	        .textContent('Para contratar un nuevo canal telefónico deberá contactar con su proveedor de servicios.')
	        .ariaLabel('Alert dialog')
	        .ok('Cerrar')
	        .targetEvent(args[0])
	    );
		}

		function newChat(){
			$cnChannels.channels.unshift({
				"multimedia": "Nuevo Chat",
				"downloadedData": true,
				"openCard": true,
        "newItem": true,
			  "multimediaId": (new Date()).getTime(),
			  "channelId": 2,
			  "configModificable": true,
			  "multimediaParams": {
					"ChatType":"Chat",
					"ChatConfig":{
						"templateId":1,
						"authenticationText":"",
						"authenticationMode":"anonymous",
						"loadingMode":"closed",
						"headerText":"",
						"welcomeText":"",
						"resetText":"",
						"connectText":"",
						"primaryBackgroundColor":"CCCCCC",
						"secundaryBackgroundColor":"FF0000",
						"primaryColor":"000000",
						"secundaryColor":"FFFFFF"
					}
				}
			});
		}

		function newMail(){
			$cnChannels.channels.unshift({
				"multimedia": "Nuevo Mail",
				"downloadedData": true,
				"openCard": true,
			  "multimediaId": (new Date()).getTime(),
			  "channelId": 3,
			  "configModificable": true,
			  "multimediaParams": {
					"MailType":"SendGrid",
					"MailConfig":{
						
					}
				}
			});
		}

		function openFab(){
			$rootScope.fab.isOpen = true;
		}

    function save(){
    	var item = angular.copy(arguments[0]);
    	delete item.openCard;
      if(item.newItem){
        item.multimediaId = -1;
      }
      $cnChannels.save(item);
    }

    function remove(){
    	var args = arguments;
    	$cnChannels.remove($scope.$cnChannels.channels[args[0]].multimediaId).then(function(){
        $scope.$cnChannels.channels.splice(args[0], 1);  
      });
    }


  }
  module.exports.$inject = ["$rootScope", "$scope", "$cnContactNets", "$cnChannels", "$filter", "$mdDialog"];

}());

},{}],5:[function(require,module,exports){
(function () {

	'use strict';

	module.exports = angular.module('cnChannels', [])
		.controller('channelsController', require('./channelsController.js'))
	;
	
}());
},{"./channelsController.js":4}],6:[function(require,module,exports){
(function(){
	'use strict';


  /* @ngInject */
  module.exports = function ($rootScope, $scope, $cnContactNets, $cnCreateContactNet){

  	$scope.contactNetsService = $cnContactNets;
    $rootScope.fab.trigger.action = $cnCreateContactNet.createContactNet;

  	$cnContactNets.get().then(function () {
      // console.log(arguments[0]);
  		$cnContactNets.contactNets = arguments[0];
      // $cnContactNets.contactNets = [];

  	});

  }
  module.exports.$inject = ["$rootScope", "$scope", "$cnContactNets", "$cnCreateContactNet"];

}());


},{}],7:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function() {

    controller.$inject = ["$scope", "$cnCategories", "$filter"];
  	var directiveObj = {
        restrict: 'EA',
        scope: {
          ngModel: '=',
          downloadedData: '=',
          card: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/contactNets/directives/categorizations/categorizations.html',
      	controller: controller
    };

    return directiveObj;


    function link(scope, element, attr, ctrl) {

    }

    /* @ngInject */
    function controller ($scope, $cnCategories, $filter) {

      $scope.categories = [];
      $scope.downloadedData;
      $scope.card;
      $scope.actionCard = actionCard;

      $cnCategories.get().then(function(){
        $scope.categories = arguments[0];
        $scope.downloadedData = true;
      });

      function actionCard(){
        var args = arguments;
        if( $filter('filter')($scope.ngModel, {id: args[0].id}, true).length ){
          angular.forEach($scope.ngModel, function(){
            if(arguments[0].id === args[0].id){
              $scope.ngModel.splice(arguments[1], 1);
            }  
          });
        }else{
          $scope.ngModel.push(args[0]);
        }
      }


    }

  }


}());

},{}],8:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function($cnContactNets) {
  	
    controller.$inject = ["$scope"];
  	var directive = {
        restrict: 'EA',
        scope : {
        	contactnet : '=',
        	ngModel: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/contactNets/directives/cnContactNetChannelsConfig/cnContactNetChannelsConfig.html',
      	controller: controller
    };

    return directive;


    function link(scope, element, attr, ctrl) {

    }

    /* @ngInject */
    function controller ($scope) {

    	console.log($scope);
    	$scope.contactnet.contactNetInfo.voiceChannelParams.notifications = $scope.contactnet.contactNetInfo.voiceChannelParams.notifications || [];
    	$scope.contactnet.contactNetInfo.voiceChannelParams.outgoingConfiguration = $scope.contactnet.contactNetInfo.voiceChannelParams.outgoingConfiguration || {};
    	($scope.contactnet.contactNetInfo.voiceChannelParams.outgoingConfiguration.outgoingConfig = $scope.contactnet.contactNetInfo.voiceChannelParams.outgoingConfiguration.outgoingConfig || []);

    	$cnContactNets.getStrategies($scope.contactnet.contactNetInfo.voiceChannelParams.channelId).then(function () {
    		if($scope.contactnet.contactNetInfo == null)
    			return;
    		$scope.contactnet.contactNetInfo.voiceChannelParams.strategies = arguments[0];
    		console.log('getStrategies', arguments[0]);
    	});

    	$cnContactNets.getOutGoingNumbering().then(function () {
    		if($scope.contactnet.contactNetInfo == null)
    			return;
    		$scope.contactnet.contactNetInfo.voiceChannelParams.ani = arguments[0];
    		console.log('getOutGoingNumbering', arguments[0]);
    	});

    	$cnContactNets.getSpeech().then(function () {
    		if($scope.contactnet.contactNetInfo == null)
    			return;
				console.log('SPEECHS', arguments[0]);
				$scope.contactnet.contactNetInfo.voiceChannelParams.speechs = arguments[0];
			});

			$cnContactNets.getOutGoing().then(function () {
				if($scope.contactnet.contactNetInfo == null)
    			return;
				console.log('getOutGoing', arguments[0]);
				$scope.contactnet.contactNetInfo.voiceChannelParams.outGoing = arguments[0];
			});

			$scope.onSpeechChange = function () {
    		console.log($scope.contactnet);
    		console.log('HA CAMBIADO', arguments[0]);
    			// arguments[0] && $cnContactNets.getStreamSpeech(arguments[0]).then(function () {
	    		// 	// console.log('lalalalalalalala', arguments[0]);
	    		// });
    	};

    }
  }
  module.exports.$inject = ["$cnContactNets"];

 
}());

},{}],9:[function(require,module,exports){
(function() {
	'use strict';
  /* @ngInject */
  module.exports = function ($cnContactNets) {
  	
    controller.$inject = ["$scope", "$cnChannels", "$filter"];
  	var directive = {
        restrict: 'EA',
        scope : {
        	contactnet : '=',
        	ngModel: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/contactNets/directives/cnContactNetChatCardChannelConfiguration/cnContactNetChatCardChannelConfiguration.html',
      	controller: controller
    };

    return directive;


    function link(scope, element, attr, ctrl) {

    }

    /* @ngInject */
    function controller ($scope, $cnChannels, $filter) {
    	console.warn($scope.contactnet);
    	$scope.channels = [];
    	$scope.survey = $scope.contactnet.chatChannelParams.survey ? true : false;
    	$scope.autoReplies = $scope.contactnet.chatChannelParams.autoReplies.length ? true : false;

    	$cnChannels.get().then(function(){
    		$scope.channels = $filter('filter')(arguments[0], {channelId: 2});
    	});

    }
  }
  module.exports.$inject = ["$cnContactNets"];

 
}());
},{}],10:[function(require,module,exports){
(function() {
	'use strict';
	
  /* @ngInject */
  module.exports = function($cnContactNets) {

    controller.$inject = ["$scope", "$cnChannels", "$filter"];
  	var directive = {
        restrict: 'EA',
        scope : {
        	contactnet : '=',
        	ngModel: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/contactNets/directives/cnContactNetMailCardChannelConfiguration/cnContactNetMailCardChannelConfiguration.html',
      	controller: controller
    };

    return directive;


    function link(scope, element, attr, ctrl) {

    }

    /* @ngInject */
    function controller ($scope, $cnChannels, $filter) {
    	console.warn($scope.contactnet);
    	$scope.channels = [];
    	$scope.survey = $scope.contactnet.chatChannelParams.survey ? true : false;
    	$scope.autoReplies = $scope.contactnet.chatChannelParams.autoReplies.length ? true : false;
    	$scope.footer = $scope.contactnet.chatChannelParams.footer ? true : false;

    	$cnChannels.get().then(function(){
    		$scope.channels = $filter('filter')(arguments[0], {channelId: 3});
    	});

    }
  }
  module.exports.$inject = ["$cnContactNets"];


}());

},{}],11:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnContactNets) {
  	
    controller.$inject = ["$scope"];
  	var directive = {
        restrict: 'EA',
        scope : {
        	contactnet : '=',
        	ngModel: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/contactNets/directives/cnContactNetVoiceCardChannelConfiguration/cnContactNetVoiceCardChannelConfiguration.html',
      	controller: controller
    };

    return directive;


    function link(scope, element, attr, ctrl) {
    	console.log('voiceCard', scope);
    }

    /* @ngInject */
    function controller ($scope) {

    	$scope.onTypeNotificationChange = function () {
				var args = arguments;
				console.log('arguments onTypeNotificationChange', args);
				var call = {
					'ADVERTISEMENT' : 'getSpeech',
					'QUEUEMEMBER_POSITION' : 'getVoices',
					'QUEUEMEMBER_TIME' : 'getVoices'
				}
				$cnContactNets[call[args[0]]](args[0]).then(function () {
					console.log('arguments '+call[args[0]], arguments[0]);
					args[1].selectConfig = arguments[0];
				});
			}

    }
  }
  module.exports.$inject = ["$cnContactNets"];

 
}());
},{}],12:[function(require,module,exports){
(function() {
  'use strict';
  
  /* @ngInject */
  module.exports = function() {
    
    controller.$inject = ["$scope", "$cnRepos"];
    var directive = {
        restrict: 'EA',
        scope : {
          contactnet : '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/contactNets/directives/cnContactnetBackoffice/cnContactnetBackoffice.html',
        controller: controller
    };

    return directive;


    function link(scope, element, attr, ctrl) {
      

    }

    /* @ngInject */
    function controller ($scope, $cnRepos) {
      
      $scope.repos = {};
      $scope.open = open;


      $cnRepos.get().then(function(){
        $scope.repos = arguments[0];
      });

      function open(){
        $scope.repos[arguments[0]].downloadedData = false;
        $scope.repos[arguments[0]].openCard = !$scope.repos[arguments[0]].openCard;
      }
      
    }
  }

 
}());
},{}],13:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function () {

    controller.$inject = ["$scope", "$cnPauseStatus", "$filter"];
  	var directiveObj = {
        restrict: 'EA',
        scope: {
          ngModel: '=',
          downloadedData: '=',
          card: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/contactNets/directives/pause_states/pause_states.html',
      	controller: controller
    };

    return directiveObj;


    function link(scope, element, attr, ctrl) {

    }

    /* @ngInject */
    function controller ($scope, $cnPauseStatus, $filter) {

      $scope.pauseStates = [];
      $scope.downloadedData;
      $scope.card;
      $scope.actionCard = actionCard;

      $cnPauseStatus.get().then(function(){
        $scope.pauseStates = arguments[0];
        $scope.downloadedData = true;
      });

      function actionCard(){
        var args = arguments;
        if( $filter('filter')($scope.ngModel, {id: args[0].id}, true).length ){
          angular.forEach($scope.ngModel, function(){
            if(arguments[0].id === args[0].id){
              $scope.ngModel.splice(arguments[1], 1);
            }  
          });
        }else{
          $scope.ngModel.push(args[0]);
        }
      }


    }

  }


}());

},{}],14:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function () {

    controller.$inject = ["$scope", "$cnQualifications", "$filter"];
  	var directiveObj = {
        restrict: 'EA',
        scope: {
          ngModel: '=',
          downloadedData: '=',
          card: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/contactNets/directives/qualifications/qualifications.html',
      	controller: controller
    };

    return directiveObj;


    function link(scope, element, attr, ctrl) {

    }

    /* @ngInject */
    function controller ($scope, $cnQualifications, $filter) {

      $scope.qualifications = [];
      $scope.downloadedData;
      $scope.card;
      $scope.actionCard = actionCard;

      $cnQualifications.get().then(function(){
        $scope.qualifications = arguments[0];
        $scope.downloadedData = true;
      });

      function actionCard(){
        var args = arguments;
        if( $filter('filter')($scope.ngModel, {id: args[0].id}, true).length ){
          angular.forEach($scope.ngModel, function(){
            if(arguments[0].id === args[0].id){
              $scope.ngModel.splice(arguments[1], 1);
            }  
          });
        }else{
          $scope.ngModel.push(args[0]);
        }
      }


    }
  }


}());

},{}],15:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($timeout) {

    controller.$inject = ["$scope", "$cnSkills", "$filter"];
  	var directiveObj = {
        restrict: 'EA',
        scope: {
          ngModel: '=',
          downloadedData: '=',
          card: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/contactNets/directives/skills/skills.html',
      	controller: controller
    };

    return directiveObj;


    function link(scope, element, attr, ctrl) {

    }

    /* @ngInject */
    function controller ($scope, $cnSkills, $filter) {

      $scope.skills = [];
      $scope.downloadedData;
      $scope.card;
      $scope.toogleAll = toogleAll;
      $scope.select = select;

      $cnSkills.get().then(function(){
        
        angular.forEach(arguments[0], function(){
          arguments[0].selected = Boolean($filter('filter')($scope.ngModel, {id: arguments[0].id}, true).length);
          $scope.skills.push(arguments[0]);
        });

        $scope.downloadedData = true;
      });

      function toogleAll(){
        var args = arguments;
        angular.forEach($scope.skills, function () {
          if(arguments[0].selected !== args[0]){
            arguments[0].selected = args[0];
            select(arguments[0]);  
          }
        })
      }

      function select(){
        var args = arguments;
        if(args[0].selected){
          $scope.ngModel.push(args[0]);
        }else{
          angular.forEach($scope.ngModel, function(){
            if(args[0].id === arguments[0].id){
              $scope.ngModel.splice(arguments[1], 1);  

            }
          });
        }
      }


    }
  }
  module.exports.$inject = ["$timeout"];


}());

},{}],16:[function(require,module,exports){
(function () {
	'use strict';

	module.exports = angular.module('cnContactNets', [])
		.controller('contactNetsController', require('./contactNetsController.js'))
		.directive('cnContactnetSkills', require('./directives/skills/skills.js'))
		.directive('cnContactnetQualifications', require('./directives/qualifications/qualifications.js'))
		.directive('cnContactnetPauseStates', require('./directives/pauseStates/pauseStates.js'))
		.directive('cnContactNetVoiceCardChannelConfiguration', require('./directives/cnContactNetVoiceCardChannelConfiguration/cnContactNetVoiceCardChannelConfiguration.js'))
		.directive('cnContactNetChatCardChannelConfiguration', require('./directives/cnContactNetChatCardChannelConfiguration/cnContactNetChatCardChannelConfiguration.js'))
		.directive('cnContactNetMailCardChannelConfiguration', require('./directives/cnContactNetMailCardChannelConfiguration/cnContactNetMailCardChannelConfiguration.js'))
		.directive('cnContactNetChannelsConfig', require('./directives/cnContactNetChannelsConfig/cnContactNetChannelsConfig.js'))
		.directive('cnContactnetBackoffice', require('./directives/cnContactnetBackoffice/cnContactnetBackoffice.js'))
		.directive('cnContactnetCategorizations', require('./directives/categorizations/categorizations.js'))
	;

}());
},{"./contactNetsController.js":6,"./directives/categorizations/categorizations.js":7,"./directives/cnContactNetChannelsConfig/cnContactNetChannelsConfig.js":8,"./directives/cnContactNetChatCardChannelConfiguration/cnContactNetChatCardChannelConfiguration.js":9,"./directives/cnContactNetMailCardChannelConfiguration/cnContactNetMailCardChannelConfiguration.js":10,"./directives/cnContactNetVoiceCardChannelConfiguration/cnContactNetVoiceCardChannelConfiguration.js":11,"./directives/cnContactnetBackoffice/cnContactnetBackoffice.js":12,"./directives/pauseStates/pauseStates.js":13,"./directives/qualifications/qualifications.js":14,"./directives/skills/skills.js":15}],17:[function(require,module,exports){
(function(){	
	"use strict";

	/* @ngInject*/ 
  module.exports = function ($rootScope, $scope, $timeout, $mdSidenav, $cnMenu, $cnNavigate, $location, $interval, $window) {

  	$scope.hola = 'hola';
		$scope.toggleLeft = buildToggler('left');
		$scope.menu = {};
		$scope.cnNavigate = $cnNavigate;
		$scope.environment = {};
		$scope.session = $window.session;

		$rootScope.fab = {
			isOpen: false,
			hide: false,
			trigger: {
				icon: 'add',
				action: function(){}
			},
			actions: []
		};


		$scope.isOpenLeft = function(){
      return $mdSidenav('left').isOpen();
    };

		function buildToggler() {
			var args = arguments;
			return function() {
				$mdSidenav(args[0])
				.toggle();
			};
		}

		$cnMenu.get().then(function(){
			console.log("arguments", arguments[0]);
			$scope.menu = arguments[0];
		});

		$rootScope.$on('$stateChangeSuccess', function () {
			$rootScope.fab.isOpen = false;
			$rootScope.fab.hide = false;
			$rootScope.fab.actions = [];

			switch(arguments[1].url) {
				case '/contactnets':
					$scope.selectedIndex = 0;
					$scope.environment.actualSection = 'ContactNets';
				break;
				case '/rules':
					$scope.selectedIndex = 1;
					$scope.environment.actualSection = 'Canales';
				break;
				case '/channels':
					$scope.selectedIndex = 2;
					$scope.environment.actualSection = 'Reglas';
				break;
				case '/repos':
					$scope.selectedIndex = 3;
					$scope.environment.actualSection = 'Repositorio';
				break;
			}
		});

  }
  module.exports.$inject = ["$rootScope", "$scope", "$timeout", "$mdSidenav", "$cnMenu", "$cnNavigate", "$location", "$interval", "$window"];

}());

},{}],18:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function () {
  	
    controller.$inject = ["$scope"];
  	var directive = {
        restrict: 'EA',
        scope : {
        	supervisor : '=',
        	agents: '=',
        	ngOpenCard : '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/core/directives/cnAgentsBySupervisor/cnAgentsBySupervisor.html',
      	controller: controller
    };

    return directive;


    function link(scope, element, attr, ctrl) {

    	console.log('cnSupervisorsConfig', scope);
    	scope.filterSelected = true
    	scope.querySearch = querySearch;
    	scope.filterAgents = [];

    	function querySearch () {
	      
    		// console.log('Texto Query', arguments[0]);
    		var result = [];
    		for (var i = 0; i < scope.agents.length; i++) {
    			if (~scope.agents[i].name.indexOf(arguments[0])) {
    				result.push(scope.agents[i]);
    			};
    		};

	      return result;
	    }
    }

    /* @ngInject */
    function controller ($scope) {
    }

  }

 
}());
},{}],19:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnContactNets) {
  	
  	var directive = {
        restrict: 'EA',
        scope : {
        	src : '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/core/directives/cnAudio/cnAudio.html',
    };

    return directive;

    function link(scope, element, attr, ctrl) {

    	console.log('SCOPE AUDIO', scope);
    	var media = element[0].querySelector('audio');
    	// scope.isPlaying = false;

    	scope.$watch('src', function () {
    		// console.log('entra en watch', arguments[0]);
    		media.src = '/home/stream/streamspeech?id='+arguments[0];
    		// console.log(element.querySelector('audio').src = scope.url);
    	});

    	media.addEventListener('canplay',function(){
    		console.log('canplay');
        scope.$apply(function(){
	      	scope.isError = false;
        })
      });

      media.addEventListener('waiting',function(){
      	console.log('waiting');
        scope.$apply(function(){
          scope.mediaConfig = {
          	isLoaded : false,
          }
        });
      });

      media.addEventListener('ended',function(){
      	console.log('ERROR al intentar reproducir el audio', arguments[0]);
      	scope.$apply(function(){
	      	scope.isPlaying = false;
	      });
      })

      media.addEventListener('error',function(){
      	console.log('ERROR al intentar reproducir el audio', arguments[0]);
      	scope.$apply(function(){
	      	scope.isPlaying = false;
	      	scope.isError = true;
	      });
      })

      scope.actionPlaying = function(){
        scope.isPlaying ? scope.stop() : scope.play();
      }

      scope.play = function () {
      	media.play();
      	scope.isPlaying = true;
      }

      scope.stop = function () {
      	media.currentTime = 0;
      	media.pause();
      	scope.isPlaying = false;
      }

      scope.pause = function () {
      	media.pause();
      }


    	// scope.$apply(function () {
    	// 	scope.url;
    	// });

    }
  }
  module.exports.$inject = ["$cnContactNets"];

 
}());
},{}],20:[function(require,module,exports){
(function () {
  'use strict';

  /* @ngInject */
  module.exports = function () {
    link.$inject = ["scope", "element", "attr", "ctrl"];
    return {
      restrict: 'E',
      templateUrl: '/contactNetConfig/modules/core/directives/cnColorPicker/cnColorPicker.html',
      link: link,
      scope: {
        options: '=',
        ngModel: '=',
        onColorChanged: '&',
        ngDisabled: '='
      }
    };

    /* @ngInject */
    function link(scope, element, attr, ctrl) {

      scope.changeColor = function (option) {
        if(scope.ngModel != option && !scope.ngDisabled) {
          var old = scope.ngModel;
          scope.ngModel = option;
          scope.onColorChanged({newColor: option, oldColor: old});
        }
      }

    }
  }
}());
},{}],21:[function(require,module,exports){
(function () {

  'use strict';

  /* @ngInject */
  module.exports = function () {
    var clip;
    function link(scope, element) {
      function clipboardSimulator() {
        var self = this,
          textarea,
          container;
        function createTextarea() {
          if (!self.textarea) {
            container = document.createElement('div');
            container.id = 'simulate-clipboard-container';
            container.setAttribute('style', ['position: fixed;', 'left: 0px;', 'top: 0px;', 'width: 0px;', 'height: 0px;', 'z-index: 100;', 'opacity: 0;', 'display: block;'].join(''));
            document.body.appendChild(container);
            textarea = document.createElement('textarea');
            textarea.setAttribute('style', ['width: 1px;', 'height: 1px;', 'padding: 0px;'].join(''));
            textarea.id = 'simulate-clipboard';
            self.textarea = textarea;
            container.appendChild(textarea);
          }
        }
        createTextarea();
      }
      clipboardSimulator.prototype.copy = function() {
        this.textarea.innerHTML = '';
        this.textarea.appendChild(document.createTextNode(scope.cnCopy));
        this.textarea.focus();
        this.textarea.select();
        setTimeout(function() {
            document.execCommand('copy');
        }, 20);
      };
      clip = new clipboardSimulator();

      element[0].addEventListener('click', function() {
        clip.copy();
      });
    }
    return {
      restrict: 'A',
      link: link,
      scope: {
        cnCopy: '='
      }
    };
  }
}());
},{}],22:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnContactNets, $cnCreateContactNet) {
  	
  	var directive = {
        restrict: 'EA',
        scope: {},
        link: link
    };

    return directive;


    function link(scope, element, attr, ctrl) {

    	element.on('click', elementClick);

    	function elementClick(){

    		cnCreateContactNet.createContactNet();

			}

    }
  }
  module.exports.$inject = ["$cnContactNets", "$cnCreateContactNet"];

 
}());
},{}],23:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnRules) {
  	
  	var directive = {
        restrict: 'EA',
        scope: {},
        link: link
    };

    return directive;


    function link(scope, element, attr, ctrl) {

    	element.on('click', elementClick);

    	function elementClick(){

    		console.log('lasldglasdg', $cnRules.rules);

				$cnRules.rules.splice(0, 0, {
					"id": random(1,50), 
					"description": "Nueva Regla",
					"openCard": true,
					"modificable": true,
				});

				$cnRules.getById().then(function () {
					$cnRules.rules[0].RuleInfo = arguments[0];
				});

			}

		  function random(){
				return Math.floor(Math.random() * arguments[1]) + arguments[0];
			}
    }
  }
  module.exports.$inject = ["$cnRules"];
 
}());
},{}],24:[function(require,module,exports){
(function() {
  'use strict';

  /* @ngInject */
  module.exports = function ($cnNavigate) {
    var directive = {
        restrict: 'A',
        scope: {
          cnNavigate: '@'
        },
        link: link
    };

    return directive;


    function link(scope, element, attr, ctrl) {

      element.css('cursor', 'pointer');

      element.on('click', elementClick);

      function elementClick(){
        $cnNavigate.path(attr.cnNavigate);
        scope.$apply();
      }

    }

  }
  module.exports.$inject = ["$cnNavigate"];//End directive

  

}());
},{}],25:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnChannels) {
  	var directiveObj = {
        restrict: 'EA',
        scope: {
					channel: '=cnChannelInfo'
				},
        link: link
    };

    return directiveObj;


    function link(scope, element, attr, ctrl) {

    	element.on('click', elementClick);

    	function elementClick(){
				
    		if(arguments[0].target.localName === 'button')
    			return;

	  		angular.forEach($cnChannels.channels, function () {

	  			var argsForEach = arguments;
	  			if (argsForEach[0].multimediaId == scope.channel.multimediaId) {
	  				if ($cnChannels.channels[argsForEach[1]].downloadedData) {
	  					$cnChannels.channels[argsForEach[1]].openCard = !$cnChannels.channels[argsForEach[1]].openCard;
	  				}else {
	  					$cnChannels.channels[argsForEach[1]].openCard = !$cnChannels.channels[argsForEach[1]].openCard;
	  					$cnChannels.channels[argsForEach[1]].downloadedData = true;
		  			// 	$cnChannels.getById($cnChannels.channels[argsForEach[1]].multimediaId).then(function () {
		  			// 		$cnChannels.channels[argsForEach[1]] = arguments[0][0];
		  			// 		$cnChannels.channels[argsForEach[1]].downloadedData = true;
		  			// 		$cnChannels.channels[argsForEach[1]].openCard = !$cnChannels.channels[argsForEach[1]].openCard;
		  			// 		console.log($cnChannels.channels, $cnChannels.channels[argsForEach[1]]);
							// });
	  				};
	  				scope.$apply();
	  			};
	  		})
			}
    }
  }
  module.exports.$inject = ["$cnChannels"];

}());

},{}],26:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnContactNets) {
  	var directive = {
        restrict: 'EA',
        scope: {
					contactNet : '=cnContactNetInfo'
				},
        link: link
    };

    return directive;


    function link(scope, element, attr, ctrl) {

    	element.on('click', elementClick);

    	function elementClick(){

    		// if(arguments[0].target.localName === 'button')
    		// 	return;

    		var cncontactnetinfo = scope.contactNet;
	  		angular.forEach($cnContactNets.contactNets, function () {
	  			var argsForEach = arguments;
	  			if (argsForEach[0].id == cncontactnetinfo.id) {
	  				if ($cnContactNets.contactNets[argsForEach[1]].contactNetInfo) {
	  					$cnContactNets.contactNets[argsForEach[1]].contactNetInfo = null;
	  					$cnContactNets.contactNets[argsForEach[1]].openCard = !$cnContactNets.contactNets[argsForEach[1]].openCard;
	  				}else {
	  					$cnContactNets.contactNets[argsForEach[1]].openCard = !$cnContactNets.contactNets[argsForEach[1]].openCard;
		  				$cnContactNets.getById(cncontactnetinfo.id).then(function () {
		  					console.log('ELEMENT', arguments[0]);
		  					$cnContactNets.contactNets[argsForEach[1]].contactNetInfo = arguments[0];
							});
	  				};
	  				scope.$apply();
	  			};
	  		})
			}
    }
  }
  module.exports.$inject = ["$cnContactNets"];

}());

},{}],27:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnRules) {
  	var directive = {
        restrict: 'EA',
        scope: {
					rule: '=cnRuleInfo'
				},
        link: link
    };

    return directive;


    function link(scope, element, attr, ctrl) {

    	element.on('click', elementClick);

    	function elementClick(){

    		if(arguments[0].target.localName === 'button')
    			return;

	  		angular.forEach($cnRules.rules, function () {

	  			var argsForEach = arguments;
	  			if (argsForEach[0].id == scope.rule.id) {
	  				if ($cnRules.rules[argsForEach[1]].downloadedData) {
	  					$cnRules.rules[argsForEach[1]].openCard = !$cnRules.rules[argsForEach[1]].openCard;
	  				}else {
	  					$cnRules.rules[argsForEach[1]].openCard = !$cnRules.rules[argsForEach[1]].openCard;
		  				$cnRules.getById($cnRules.rules[argsForEach[1]].id).then(function () {
		  					$cnRules.rules[argsForEach[1]] = arguments[0];
		  					$cnRules.rules[argsForEach[1]].downloadedData = true;
		  					$cnRules.rules[argsForEach[1]].openCard = !$cnRules.rules[argsForEach[1]].openCard;
		  					console.log($cnRules.rules, $cnRules.rules[argsForEach[1]]);
							});
	  				};
	  				scope.$apply();
	  			};
	  		})
			}
    }
  }
  module.exports.$inject = ["$cnRules"];

}());

},{}],28:[function(require,module,exports){
(function() {
    'use strict';

    /* @ngInject */
    module.exports = function ($timeout, $document) {
        
        var directive = {
            restrict: 'EA',
            scope: {},
            link: link
        };

        return directive;


        function link(scope, element, attr, ctrl) {

            var el = document.querySelector('[role="main"]');
            el.addEventListener("scroll", scroll);
            
            function scroll () {
                // console.log('FUNCIONA');
                // console.log(el.scrollTop);
                if (el.scrollTop && el.scrollTop > 240) {
                    if (!element[0].classList.contains('filterSearchExpanded'))
                        element[0].classList.add('filterSearchExpanded');
                }else {
                    if (element[0].classList.contains('filterSearchExpanded'))
                        element[0].classList.remove('filterSearchExpanded');
                };
            }

            scope.$on('$destroy', function () {
                el.removeEventListener('scroll', scroll);
            })
        }
    }
    module.exports.$inject = ["$timeout", "$document"];
 
}());
},{}],29:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnContactNets) {
  	
    controller.$inject = ["$scope"];
  	var directive = {
        restrict: 'EA',
        scope : {
        	agents : '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/core/directives/cnSelectAgents/cnSelectAgents.html',
      	controller: controller
    };

    return directive;


    function link(scope, element, attr, ctrl) {
    	console.log('cnSelectAgents', scope);

    	scope.selectDeselectAll = selectDeselectAll;

    	function selectDeselectAll () {
    		var args = arguments;
    		angular.forEach(scope.agents, function () {
    			arguments[0].selected = args[0];
    		})
    	}

    	$cnContactNets.getAgents().then(function () {
    		console.log('getAgents', arguments);
    		angular.forEach(arguments[0], function () {
    			var argsAgentsGet = arguments[0];
					angular.forEach(scope.agents, function () {
						console.log(arguments[0], argsAgentsGet);
						if (argsAgentsGet.id != arguments[0].id) {
							scope.agents.push(argsAgentsGet[0]);
						}
					})
    		})
    	})

    }

    /* @ngInject */
    function controller ($scope) {
    	// console.log('cnSupervisorsConfig', $scope);

    }
  }
  module.exports.$inject = ["$cnContactNets"];

 
}());
},{}],30:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnContactNets) {
  	
    controller.$inject = ["$scope"];
  	var directive = {
        restrict: 'EA',
        scope : {
        	contactnet : '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/core/directives/cnSupervisorsConfig/cnSupervisorsConfig.html',
      	controller: controller
    };

    return directive;


    function link(scope, element, attr, ctrl) {
    	$cnContactNets.getSupervisors().then(function () {
    		console.log('getSupervisors', arguments[0]);
		    scope.contactnet.contactNetInfo.supervisors = arguments[0];
    	});
    }

    /* @ngInject */
    function controller ($scope) {
    	console.log('cnSupervisorsConfig', $scope);

    }
  }
  module.exports.$inject = ["$cnContactNets"];

 
}());
},{}],31:[function(require,module,exports){
(function () {

	'use strict';

	module.exports = angular.module('cnCore', [])
		.controller('appController', require('./core.controller.js'))
		.service('$cnSkills', require('./services/cnSkills.js'))
		.service('$cnRules', require('./services/cnRules.js'))
		.service('$cnRepos', require('./services/cnRepos.js'))
		.service('$cnQualifications', require('./services/cnQualifications.js'))
		.service('$cnPauseStatus', require('./services/cnPauseStatus.js'))
		.service('$cnMenu', require('./services/cnMenu.js'))
		.service('$cnLanguages', require('./services/cnLanguages.js'))
		.service('$cnChannels', require('./services/cnChannels.js'))
		.service('$cnContactNets', require('./services/cnContactNets.js'))
		.service('$cnCategories', require('./services/cnCategories.js'))
		.service('$cnMocks', require('./services/mocks/mocksService.js'))
		.service('$cnNavigate', require('./services/cnNavigate.js'))
		.service('$cnCreateContactNet', require('./services/cnCreateContactNet.js'))
		.directive('cnSupervisorsConfig', require('./directives/cnSupervisorsConfig/cnSupervisorsConfig.js'))
		.directive('cnSelectAgents', require('./directives/cnSelectAgents/cnSelectAgents.js'))
		.directive('cnScroll', require('./directives/cnScroll/cnScroll.js'))
		.directive('cnOpenRules', require('./directives/cnOpenRules/cnOpenRules.js'))
		.directive('cnOpenContactNets', require('./directives/cnOpenContactNets/cnOpenContactNets.js'))
		.directive('cnOpenChannels', require('./directives/cnOpenChannels/cnOpenChannels.js'))
		.directive('cnNavigate', require('./directives/cnNavigate/cnNavigate.js'))
		.directive('cnCreateRule', require('./directives/cnCreateRule/cnCreateRule.js'))
		.directive('cnCreateContactNet', require('./directives/cnCreateContactNet/cnCreateContactNet.js'))
		.directive('cnCopy', require('./directives/cnCopy/cnCopy.js'))
		.directive('cnColorPicker', require('./directives/cnColorPicker/cnColorPicker.js'))
		.directive('cnAudio', require('./directives/cnAudio/cnAudio.js'))
		.directive('cnAgentsBySupervisor', require('./directives/cnAgentsBySupervisor/cnAgentsBySupervisor.js'))
	;
	
}());
},{"./core.controller.js":17,"./directives/cnAgentsBySupervisor/cnAgentsBySupervisor.js":18,"./directives/cnAudio/cnAudio.js":19,"./directives/cnColorPicker/cnColorPicker.js":20,"./directives/cnCopy/cnCopy.js":21,"./directives/cnCreateContactNet/cnCreateContactNet.js":22,"./directives/cnCreateRule/cnCreateRule.js":23,"./directives/cnNavigate/cnNavigate.js":24,"./directives/cnOpenChannels/cnOpenChannels.js":25,"./directives/cnOpenContactNets/cnOpenContactNets.js":26,"./directives/cnOpenRules/cnOpenRules.js":27,"./directives/cnScroll/cnScroll.js":28,"./directives/cnSelectAgents/cnSelectAgents.js":29,"./directives/cnSupervisorsConfig/cnSupervisorsConfig.js":30,"./services/cnCategories.js":32,"./services/cnChannels.js":33,"./services/cnContactNets.js":34,"./services/cnCreateContactNet.js":35,"./services/cnLanguages.js":36,"./services/cnMenu.js":37,"./services/cnNavigate.js":38,"./services/cnPauseStatus.js":39,"./services/cnQualifications.js":40,"./services/cnRepos.js":41,"./services/cnRules.js":42,"./services/cnSkills.js":43,"./services/mocks/mocksService.js":44}],32:[function(require,module,exports){
(function(){
	"use strict";

	 /**
   * @ngdoc service
   * @name $cnCategories
   * @module core
   *
   * @description
   * Provides the categories for the application
   *
   * @param {object} categories 
   *
   */

  /* @ngInject */
  module.exports = function ($q, $http){

		var scope = this;

		scope.categories = [];
		scope.get = get;
    scope.getContactnets = getContactnets;
		scope.save = save;
		scope.remove = remove;

		/**
		* @ngdoc method
		* @name $cnCategories#get
		*
		* @return {promise} elements
		*/
		function get(){
			var deferred = $q.defer();

			$http.get('/ivr/getcategories').then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });			

			return deferred.promise;
		}

    /**
    * @ngdoc method
    * @name $cnPauseStatus#getContactnets
    *
    * @param {object} skill
    *
    * @return {promise} elements
    */
    function getContactnets(){
      var args = arguments
      var deferred = $q.defer();

      $http.post('/ivr/getcontactnetsusedbycategory/', {id: args[0].id} ).then(function(){
        deferred.resolve(arguments[0].data);
      }, function(){
        deferred.reject(arguments[0].data);
      });     

      return deferred.promise;
    }

		/**
		* @ngdoc method
		* @name $cnCategories#get
		*
		* @param {object} category
		*
		* @return {promise} elements
		*/
		function save(){
			var args = arguments
			var deferred = $q.defer();

			if(!~args[0].id){
				args[0].action = 'ADD';
			}else{
				args[0].action = 'MOD';
			}

			$http.post('/ivr/savecategory', args[0]).then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });			

			return deferred.promise;
		}

		function remove(){
			var deferred = $q.defer();

			// arguments[0].action = 'DEL';

			// $http.post('/ivr/savecategory', arguments[0]).then(function(){
			// 	deferred.resolve(arguments[0].data);
			// });	

			$http.post('/ivr/deletecategory', {id:arguments[0].id}).then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });	

			return deferred.promise;
		}


		return scope;

  }
  module.exports.$inject = ["$q", "$http"];

}());
},{}],33:[function(require,module,exports){
(function(){
	"use strict";

	 /**
   * @ngdoc service
   * @name $cnChannels
   * @module core
   *
   * @description
   * Provides the channels for the application
   *
   * @param {object} channels 
   *
   */

  /* @ngInject */
  module.exports = function ($q, $http){

		var scope = this;

		scope.channels = [];
		scope.get = get;
		scope.save = save;
		scope.remove = remove;
		scope.getById = getById;

		/**
		* @ngdoc method
		* @name $cnChannels#get
		*
		* @return {promise} elements
		*/
		function get(){
			var deferred = $q.defer();

			$http.get('/ivr/getnetworkmultimedias').then(function(){
				deferred.resolve(arguments[0].data);
			});			

			return deferred.promise;
		}

		/**
		* @ngdoc method
		* @name $cnChannels#get
		*
		* @param {object} channel
		*
		* @return {promise} elements
		*/
		function save(){
			var args = arguments
			var deferred = $q.defer();

			$http.post('/ivr/savenetworkmultimedia', args[0]).then(function(){
				deferred.resolve(arguments[0].data);
			});			

			return deferred.promise;
		}

		/*
		* @param {string|<Array>string} multimedia_ids
		*/
		function remove(){
			var deferred = $q.defer();
			var remove = angular.isArray(arguments[0]) ? arguments[0] : [arguments[0]];

			$http.post('/ivr/deletenetworkmultimedia', remove).then(function(){
				deferred.resolve(arguments[0].data);
			});			

			return deferred.promise;
		}

		function getById(){
			var deferred = $q.defer();

			$http.post('/ivr/getnetworkmultimediabyid', {id : arguments[0]}).then(function(){
				deferred.resolve(arguments[0].data);
			});			

			return deferred.promise;
		}


		return scope;

  }
  module.exports.$inject = ["$q", "$http"];

}());
},{}],34:[function(require,module,exports){
(function(){
	"use strict";

	 /**
   * @ngdoc service
   * @name $cnContactNets
   * @module core
   *
   * @description
   * Provides the contactNets for the application
   *
   * @param {object} menu 
   *
   */

  /* @ngInject */
  module.exports = function ($q, $cnMocks, $http){

		var scope = this;

		scope.contactNets = [];
		scope.get = get;
		scope.getById = getById;
		scope.getSpeech = getSpeech;
		scope.getStreamSpeech = getStreamSpeech;
		scope.getStrategies = getStrategies;
		scope.getVoices = getVoices;
		scope.getOutGoing = getOutGoing;
		scope.getOutGoingNumbering = getOutGoingNumbering;
		scope.getSupervisors = getSupervisors;
		scope.getAgents = getAgents;

		/**
		* @ngdoc method
		* @name $cnContactNets#get
		*
		* @return {promise} elements
		*/
		function get(){
			var deferred = $q.defer();

			$http.get('/ivr/getcontactnets').then(function(){
				console.log('getcontactnets', arguments[0].data);
				deferred.resolve(arguments[0].data);
			});

			return deferred.promise;
		}

		function getById() {
			var deferred = $q.defer();
			console.log('ID ContactNet Enviado', arguments[0]);

			$http.post('/ivr/getcontactnetbyid', { id : arguments[0] }).then(function(){
				deferred.resolve(arguments[0].data);
			});

			return deferred.promise;
		}

		function getSpeech() {
			var deferred = $q.defer();
			// console.log('ID Enviado', arguments[0]);
			console.log(arguments[0]);
			//OPCIONAL con comas type audio
			$http.post('/ivr/getspeech', {type : 'MOH'}).then(function(){
				deferred.resolve(arguments[0].data);
			});

			return deferred.promise;
		}

		function getSupervisors() {
			var deferred = $q.defer();
			
			$http.get('/ivr/getsupervisors').then(function () {
				deferred.resolve(arguments[0].data);
			});

			return deferred.promise;
		}

		function getAgents() {
			var deferred = $q.defer();
			
			$http.get('/ivr/getagents').then(function () {
				deferred.resolve(arguments[0].data);
			});

			return deferred.promise;
		}

		function getVoices() {
			var deferred = $q.defer();
			// console.log('ID Enviado', arguments[0]);
			console.log(arguments[0]);
			//OPCIONAL con comas type audio
			$http.get('/ivr/getvoices').then(function(){
				deferred.resolve(arguments[0].data);
			});

			return deferred.promise;
		}

		function getStreamSpeech() {
			var deferred = $q.defer();
			// console.log('ID Enviado', arguments[0]);
			console.log(arguments[0]);
			//OPCIONAL con comas type audio
			$http.get('/home/stream/streamspeech?id='+arguments[0]).then(function(){
				deferred.resolve(arguments[0].data);
			});

			return deferred.promise;
		}

		function getStrategies () {
			var deferred = $q.defer();
			// console.log('ID Enviado', arguments[0]);
			console.log('channelId', arguments[0]);
			//OPCIONAL con comas type audio
			$http.post('/ivr/getstrategies', {channelId : arguments[0]}).then(function(){
				deferred.resolve(arguments[0].data);
			});

			return deferred.promise;
		}

		function getOutGoing () {
			var deferred = $q.defer();
			// console.log('ID Enviado', arguments[0]);
			console.log('channelId', arguments[0]);
			//OPCIONAL con comas type audio
			$http.get('/ivr/getoutgoing').then(function(){
				deferred.resolve(arguments[0].data);
			});

			return deferred.promise;
		}

		function getOutGoingNumbering () {

			var deferred = $q.defer();
			// console.log('ID Enviado', arguments[0]);
			console.log('getOutGoingNumbering', arguments[0]);
			//OPCIONAL con comas type audio
			$http.get('/ivr/getoutgoingnumbering').then(function(){
				deferred.resolve(arguments[0].data);
			});

			return deferred.promise;
			
		}

		// get stream by id
		// /stream/streamspeech?id=1 : GET

		// getstrategy PARAM: channelId
		// /ivr/getstrategy : POST

		// getstrategy
		// /ivr/getvoices

		// TRAFICO SALIENTE
		// /ivr/getoutgoingnumbering : GET
		// GUARDAR EN outgoingConfiguration.outgoingConfig como array

		//	getshortnumberingitemsbyconfig
		//




		return scope;

  }
  module.exports.$inject = ["$q", "$cnMocks", "$http"];

}());
},{}],35:[function(require,module,exports){
(function () {

	'use strict';

	/* @ngInject */
  module.exports = function ($cnContactNets) {

  	var scope = this;
  	scope.createContactNet = createContactNet;

  	function createContactNet () {

  		console.log('lasldglasdg', $cnContactNets.contactNets);
  		$cnContactNets.contactNets.splice(0, 0, {
				"id": random(1,50), 
				"description": "Nuevo ContactNet",
				"queueType": "BOTH", 
				"isACD": 1, 
				"openCard": true,
				"modificable": true,
				"channels": { 
					"1": 1, 
					"2": 2, 
					"3": 3
				} 
			});

			$cnContactNets.getById().then(function () {
				$cnContactNets.contactNets[0].contactNetInfo = arguments[0];
			});
  	}

		function random(){
			return Math.floor(Math.random() * arguments[1]) + arguments[0];
		}

  	return scope;
  }
  module.exports.$inject = ["$cnContactNets"];
  
}())
},{}],36:[function(require,module,exports){
(function(){
	"use strict";

	 /**
   * @ngdoc service
   * @name $cnLanguages
   * @module core
   *
   * @description
   * Provides the languages for the application
   *
   * @param {object} languages 
   *
   */

  /* @ngInject */
  module.exports = function ($q, $cnMocks){

		var scope = this;

		var languages = false;

		scope.get = get;

		/**
		* @ngdoc method
		* @name $cnLanguages#get
		*
		* @return {promise} elements
		*/
		function get(){
			var deferred = $q.defer();

			if(languages)
				deferred.resolve(languages);
			else
				$cnMocks.get('languages').then(function(){
					languages = arguments[0];
					deferred.resolve(languages);
				});

			return deferred.promise;
		}


		return scope;

  }
  module.exports.$inject = ["$q", "$cnMocks"];

})();

},{}],37:[function(require,module,exports){
(function(){
	"use strict";

	 /**
   * @ngdoc service
   * @name $cnMenu
   * @module core
   *
   * @description
   * Provides the menu for the application
   *
   * @param {object} menu 
   *
   */

  /* @ngInject */
  module.exports = function($q, $cnMocks){

		var scope = this;

		var menu = false;

		scope.get = get;


		/**
		* @ngdoc method
		* @name $cnMenu#get
		*
		* @return {promise} elements
		*/
		function get(){
			var deferred = $q.defer();

			if(menu)
				deferred.resolve(menu);
			else
				$cnMocks.getById('menu', 'MENU').then(function(){
					menu = arguments[0];
					deferred.resolve(menu);
				});

			return deferred.promise;
		}


		return scope;

  }
  module.exports.$inject = ["$q", "$cnMocks"];

})();

},{}],38:[function(require,module,exports){
(function() {
  'use strict';

  /* @ngInject */
  module.exports = function ($location){

    var scope = this;

    scope.path = path;

    function path(){
      if(!arguments[0])
        return;
      // var body = document.body
      // if(!body.classList.contains('disable-hover'))
      //   body.classList.add('disable-hover');

      $location.path(arguments[0]);      
    } 

  }
  module.exports.$inject = ["$location"];

}());
},{}],39:[function(require,module,exports){
(function(){
	"use strict";

	 /**
   * @ngdoc service
   * @name $cnPauseStatus
   * @module core
   *
   * @description
   * Provides the pauseStatus for the application
   *
   * @param {object} pauseStatus 
   *
   */

  /* @ngInject */
  module.exports = function ($q, $http){

		var scope = this;

		scope.pauseStatus = [];
		scope.get = get;
    scope.getContactnets = getContactnets;
		scope.save = save;
		scope.remove = remove;
    

		/**
		* @ngdoc method
		* @name $cnPauseStatus#get
		*
		* @return {promise} elements
		*/
		function get(){
			var deferred = $q.defer();

			$http.get('/ivr/getpausestatus').then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });			

			return deferred.promise;
		}

		/**
		* @ngdoc method
		* @name $cnPauseStatus#get
		*
		* @param {object} skill
		*
		* @return {promise} elements
		*/
		function save(){
			var args = arguments
			var deferred = $q.defer();

			if(!~args[0].id){
				args[0].action = 'ADD';
			}else{
				args[0].action = 'MOD';
			}

			$http.post('/ivr/savepausestatus', args[0]).then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });			

			return deferred.promise;
		}

    /**
    * @ngdoc method
    * @name $cnPauseStatus#getContactnets
    *
    * @param {object} skill
    *
    * @return {promise} elements
    */
    function getContactnets(){
      var args = arguments
      var deferred = $q.defer();

      $http.post('/ivr/getcontactnetsusedbypausestatus/', {id: args[0].id} ).then(function(){
        deferred.resolve(arguments[0].data);
      }, function(){
        deferred.reject(arguments[0].data);
      });     

      return deferred.promise;
    }


		function remove(){
			var deferred = $q.defer();

			// arguments[0].action = 'DEL';

			// $http.post('/ivr/savepausestatus', arguments[0]).then(function(){
			// 	deferred.resolve(arguments[0].data);
			// });	

			$http.post('/ivr/deletepausestatus', {id:arguments[0].id}).then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });			

			return deferred.promise;
		}


		return scope;

  }
  module.exports.$inject = ["$q", "$http"];

}());
},{}],40:[function(require,module,exports){
(function(){
	"use strict";

	 /**
   * @ngdoc service
   * @name $cnQualifications
   * @module core
   *
   * @description
   * Provides the qualifications for the application
   *
   * @param {object} qualifications 
   *
   */

  /* @ngInject */
	module.exports = function ($q, $http){

		var scope = this;

		scope.qualifications = [];
		scope.get = get;
    scope.getContactnets = getContactnets;
		scope.save = save;
		scope.remove = remove;

		/**
		* @ngdoc method
		* @name $cnQualifications#get
		*
		* @return {promise} elements
		*/
		function get(){
			var deferred = $q.defer();

			$http.get('/ivr/getqualifications').then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });			

			return deferred.promise;
		}

    /**
    * @ngdoc method
    * @name $cnPauseStatus#getContactnets
    *
    * @param {object} skill
    *
    * @return {promise} elements
    */
    function getContactnets(){
      var args = arguments
      var deferred = $q.defer();

      $http.post('/ivr/getcontactnetsusedbyqualification/', {id: args[0].id} ).then(function(){
        deferred.resolve(arguments[0].data);
      }, function(){
        deferred.reject(arguments[0].data);
      });     

      return deferred.promise;
    }

		/**
		* @ngdoc method
		* @name $cnQualifications#get
		*
		* @param {object} qualification
		*
		* @return {promise} elements
		*/
		function save(){
			var args = arguments
			var deferred = $q.defer();

			if(!~args[0].id){
				args[0].action = 'ADD';
			}else{
				args[0].action = 'MOD';
			}

			$http.post('/ivr/savequalification', args[0]).then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });			

			return deferred.promise;
		}

		function remove(){
			var deferred = $q.defer();

			// arguments[0].action = 'DEL';

			// $http.post('/ivr/savequalifications', arguments[0]).then(function(){
			// 	deferred.resolve(arguments[0].data);
			// });

			$http.post('/ivr/deletequalification', {id:arguments[0].id}).then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });				

			return deferred.promise;
		}


		return scope;

  }
  module.exports.$inject = ["$q", "$http"];

}());
},{}],41:[function(require,module,exports){
(function(){
  "use strict";

   /**
   * @ngdoc service
   * @name $cnRepos
   * @module core
   *
   * @description
   * Provides the repositories for the application
   *
   */

  /* @ngInject */
  module.exports = function($q, $timeout){

    var scope = this;

    var list = {
      'qualifications': {
        icon: 'school',
        title: 'Cualificaciones de casos',
        openCard: false,
        downloadedData: false
      },
      'categorizations': {
        icon: 'local_offer',
        title: 'Categorización de casos',
        openCard: false,
        downloadedData: false
      },
      'pause_states': {
        icon: 'pause_state',
        title: 'Estados de pausa',
        openCard: false,
        downloadedData: false
      },
      'skills': {
        icon: 'skills',
        title: 'Skills de agentes',
        openCard: false,
        downloadedData: false
      }
    };

    scope.get = get;
    

    /**
    * @ngdoc method
    * @name $cnRepos#get
    *
    * @return {promise} elements
    */
    function get(){
      var deferred = $q.defer();

      $timeout(function(){
        deferred.resolve(list);
      }, 0);   

      return deferred.promise;
    }



    return scope;

  }
  module.exports.$inject = ["$q", "$timeout"];

}());
},{}],42:[function(require,module,exports){
(function(){
  "use strict";

   /**
   * @ngdoc service
   * @name $cnRules
   * @module core
   *
   * @description
   * Provides the rules for the application
   *
   * @param {object} rules 
   *
   */

  /* @ngInject */
  module.exports = function($q, $http){

    var scope = this;

    scope.rules = [];
    scope.get = get;
    scope.getById = getById;
    scope.save = save;
    scope.duplicate = duplicate;
    scope.remove = remove;
    

    /**
    * @ngdoc method
    * @name $cnRules#get
    *
    * @return {promise} elements
    */
    function get(){
      var deferred = $q.defer();

      $http.get('/ivr/getconfiguration').then(function(){
        deferred.resolve(arguments[0].data);
      });     

      return deferred.promise;
    }

    /**
    * @ngdoc method
    * @name $cnRules#get
    *
    * @param {object} rule
    *
    * @return {promise} elements
    */
    function save(){
      var args = arguments
      var deferred = $q.defer();

      $http.post('/ivr/saveconfigurationmultimedia', args[0]).then(function(){
        deferred.resolve(arguments[0].data);
      });     

      return deferred.promise;
    }


    /**
    * @ngdoc method
    * @name $cnRules#duplicate
    *
    * @param {string|number} id
    * @param {string} name
    *
    * @return {promise} elements
    */
    function duplicate(){
      var args = arguments
      var deferred = $q.defer();

      $http.post('/ivr/duplicateconfig', {configurationId: args[0], configurationName: args[1]} ).then(function(){
        deferred.resolve(arguments[0].data);
      });     

      return deferred.promise;
    }

    /*
    * @param {string|<Array>string} multimedia_ids
    */
    function remove(){
      var deferred = $q.defer();

      $http.post('/ivr/deleteconfiguration', {id: arguments[0].id}).then(function(){
        deferred.resolve(arguments[0].data);
      });     

      return deferred.promise;
    }


    function getById(){
      var deferred = $q.defer();

      $http.post('/ivr/getmultimediatree', {id : arguments[0]}).then(function(){
        deferred.resolve(arguments[0].data);
      });     

      return deferred.promise;
    }


    return scope;

  }
  module.exports.$inject = ["$q", "$http"];

}());
},{}],43:[function(require,module,exports){
(function(){
	"use strict";

	 /**
   * @ngdoc service
   * @name $cnSkills
   * @module core
   *
   * @description
   * Provides the skills for the application
   *
   * @param {object} skills 
   *
   */

  /* @ngInject */
  module.exports = function ($q, $http){

		var scope = this;

		scope.skills = [];
		scope.get = get;
    scope.getContactnets = getContactnets;
		scope.save = save;
		scope.remove = remove;
		scope.getById = getById;

		/**
		* @ngdoc method
		* @name $cnSkills#get
		*
		* @return {promise} elements
		*/
		function get(){
			var deferred = $q.defer();

			$http.get('/ivr/getskills').then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });			

			return deferred.promise;
		}

    /**
    * @ngdoc method
    * @name $cnPauseStatus#getContactnets
    *
    * @param {object} skill
    *
    * @return {promise} elements
    */
    function getContactnets(){
      var args = arguments
      var deferred = $q.defer();

      $http.post('/ivr/getcontactnetsusedbyskill/', {id: args[0].id} ).then(function(){
        deferred.resolve(arguments[0].data);
      }, function(){
        deferred.reject(arguments[0].data);
      });     

      return deferred.promise;
    }

		/**
		* @ngdoc method
		* @name $cnSkills#get
		*
		* @param {object} skill
		*
		* @return {promise} elements
		*/
		function save(){
			var args = arguments
			var deferred = $q.defer();

			if(!~args[0].id){
				args[0].action = 'ADD';
			}else{
				args[0].action = 'MOD';
			}

			$http.post('/ivr/saveskill', args[0]).then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });			

			return deferred.promise;
		}

		function remove(){
			var deferred = $q.defer();

			// arguments[0].action = 'DEL';

			// $http.post('/ivr/saveskill', arguments[0]).then(function(){
			// 	deferred.resolve(arguments[0].data);
			// });

			$http.post('/ivr/deleteskill', {id:arguments[0].id}).then(function(){
				deferred.resolve(arguments[0].data);
			}, function(){
        deferred.reject(arguments[0].data);
      });				

			return deferred.promise;
		}

		function getById() {
			var deferred = $q.defer();

			$cnMocks.get('skillsId').then(function(){
				deferred.resolve(arguments[0]);
			});

			return deferred.promise;
		}


		return scope;

  }
  module.exports.$inject = ["$q", "$http"];

}());
},{}],44:[function(require,module,exports){
(function(){
	"use strict";

	 /**
   * @ngdoc service
   * @name $cnMocks
   * @module core
   *
   * @description
   * Provides an interface that simulates a server to provide custom mocks
   *
   */

  /* @ngInject */
  module.exports = function ($http, $q, $timeout){

  	var listJsons = ['menu', 'listContactNets', 'contactNetId', 'channels', 'rules', 'rulesId', 'languages', 'channels', 'channelsId'];
		var scope = this;

		scope.bbdd = {};

		scope.get = get;
		scope.getById = getById;
		scope.set = set;

		init();


		/**
		* @ngdoc method
		* @name $cnMocks#get
		*
		* @param {string} bbdd Table used to provide de data
		*
		* @return {promise} elements
		*/
		function get(){
			var deferred = $q.defer();
			var args = arguments;

			//Timeout to simulate server latency
			$timeout(function(){
				var array = [];
				angular.forEach(scope.bbdd[args[0]], function(){
					array.push(arguments[0]);
				});
				deferred.resolve(array);
			}, random(200, 500) );

			return deferred.promise;
		}

		/**
		* @ngdoc method
		* @name $cnMocks#getById
		*
		* @param {string} bbdd Table used to provide de data
		* @param {string} id Id to get the expected element
		*
		* @return {promise} element
		*/
		function getById(){
			var deferred = $q.defer();
			var args = arguments;
			//Timeout to simulate server latency
			$timeout(function(){
				deferred.resolve(scope.bbdd[args[0]][args[1]] || false);
			}, random(200, 500) );

			return deferred.promise;
		}

		/**
		* @ngdoc method
		* @name $cnMocks#set
		*
		* @param {string} bbdd Table used to set de data
		* @param {object} data Element data
		* @param {string} id Id to set the element
		*
		* @return {promise} element
		*/
		function set(){
			var deferred = $q.defer();
			var args = arguments;

			//Timeout to simulate server latency
			$timeout(function(){
				if(args[2] === undefined){
					var id = random(1000,9999);
					args[1].id = id;
					deferred.resolve(scope.bbdd[args[0]][id] = args[1]);
				}else
					deferred.resolve(scope.bbdd[args[0]][args[2]] = args[1]);
			}, random(300, 500) );

			return deferred.promise;
		}


		function random(){
			return Math.floor(Math.random() * arguments[1]) + arguments[0];
		}

		function init(){

			for (var i = 0; i < listJsons.length; i++) {
				(function (e) {
					var args = arguments;
					$http.get('/contactNetConfig/modules/core/services/mocks/json/'+args[0]+'.json').success(function(){
						scope.bbdd[args[0]] = arguments[0];
					});
				}(listJsons[i]));
			};
		}

		return scope;

  }
  module.exports.$inject = ["$http", "$q", "$timeout"];

})();

},{}],45:[function(require,module,exports){
(function() {
	'use strict';
  
  /* @ngInject */
  module.exports = function() {

    controller.$inject = ["$scope", "$cnCategories", "$filter", "$q", "$mdToast"];
  	var directiveObj = {
        restrict: 'EA',
        scope: {
          downloadedData: '=',
          card: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/repos/directives/categorizations/categorizations.html',
      	controller: controller
    };

    return directiveObj;


    function link(scope, element, attr, ctrl) {

    }

    /* @ngInject */
    function controller ($scope, $cnCategories, $filter, $q, $mdToast) {

      var oldCategories = [];
    	$scope.categories = [];

      $scope.addNew = addNew;
      $scope.remove = remove;
      $scope.save = save;

      init();

      function init(){
        $cnCategories.get().then(function(){
          $scope.categories = arguments[0];
          oldCategories = angular.copy($scope.categories);
          $scope.downloadedData = true;
        });
      }

      function addNew(){
        $scope.categories.push({
          id: -1,
          label: "",
          modificable: true
        });
      }

      function save(){
        var promises = [];
        angular.forEach($scope.categories, function(){
          var args = arguments;
          if(args[0].action === 'DEL'){
            if(args[0].id !== -1){
              promises.push($cnCategories.remove(args[0]).then(function(){
                $scope.categories.splice(args[1], 1);  
              }, function(){
                delete $scope.categories[args[1]].action;  
              }));  
            }
          }else if(args[0].id === -1 || $filter('filter')(oldCategories, {id: args[0].id})[0].label !== args[0].label ){
            promises.push($cnCategories.save(args[0]).then(function(){
              $scope.categories[args[1]].id = arguments[0].id;  
            }));
          }
        });

        $q.all(promises).then(function(){
          $scope.card.openCard = false;
        });

      }

      function remove(){
        var args = arguments;
        $cnCategories.getContactnets(args[0]).then(function(){
          if(!arguments[0].length)
            args[0].action = 'DEL';
          else{
            $mdToast.show(
              $mdToast.simple()
                .textContent('Categoría en uso por '+arguments[0].length+' contactNet'+(arguments[0].length == 1 ? '' :'s') )
                .position('bottom left')
                .hideDelay(2500)
            );
          }
        });
        
      }

    }
  }


}());

},{}],46:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function () {

    controller.$inject = ["$scope", "$cnPauseStatus", "$filter", "$q", "$mdToast"];
  	var directiveObj = {
        restrict: 'EA',
        scope: {
          downloadedData: '=',
          card: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/repos/directives/pause_states/pause_states.html',
      	controller: controller
    };

    return directiveObj;


    function link(scope, element, attr, ctrl) {

    }

    /* @ngInject */
    function controller ($scope, $cnPauseStatus, $filter, $q, $mdToast) {

      var oldPause_states = [];
    	$scope.pause_states = [];

      $scope.addNew = addNew;
      $scope.remove = remove;
      $scope.save = save;

      init();

      function init(){
        $cnPauseStatus.get().then(function(){
          $scope.pause_states = arguments[0];
          oldPause_states = angular.copy($scope.pause_states);
          $scope.downloadedData = true;
        });
      }

      function addNew(){
        $scope.pause_states.push({
          id: -1,
          label: "",
          modificable: true
        });
      }

      function save(){
        var promises = [];
        angular.forEach($scope.pause_states, function(){
          var args = arguments;
          if(args[0].action === 'DEL'){
            if(args[0].id !== -1){
              promises.push($cnPauseStatus.remove(args[0]).then(function(){
                $scope.pause_states.splice(args[1], 1);  
              }, function(){
                delete $scope.pause_states[args[1]].action;  
              }));  
            }
          }else if(args[0].id === -1 || $filter('filter')(oldPause_states, {id: args[0].id})[0].label !== args[0].label ){
            promises.push($cnPauseStatus.save(args[0]).then(function(){
              $scope.pause_states[args[1]].id = arguments[0].id;  
            }));
          }
        });

        $q.all(promises).then(function(){
          $scope.card.openCard = false;
        });

      }

      function remove(){
        var args = arguments;
        $cnPauseStatus.getContactnets(args[0]).then(function(){
          if(!arguments[0].length)
            args[0].action = 'DEL';
          else{
            $mdToast.show(
              $mdToast.simple()
                .textContent('Estado en uso por '+arguments[0].length+' contactNet'+(arguments[0].length == 1 ? '' :'s') )
                .position('bottom left')
                .hideDelay(2500)
            );
          }
        });
        
      }

    }
  }


}());

},{}],47:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function () {

    controller.$inject = ["$scope", "$cnQualifications", "$filter", "$q", "$mdToast"];
  	var directiveObj = {
        restrict: 'EA',
        scope: {
          downloadedData: '=',
          card: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/repos/directives/qualifications/qualifications.html',
      	controller: controller
    };

    return directiveObj;


    function link(scope, element, attr, ctrl) {

    }

    /* @ngInject */
    function controller ($scope, $cnQualifications, $filter, $q, $mdToast) {

      var oldQualifications = [];
    	$scope.qualifications = [];

      $scope.addNew = addNew;
      $scope.remove = remove;
      $scope.save = save;

      init();

      function init(){
        $cnQualifications.get().then(function(){
          $scope.qualifications = arguments[0];
          oldQualifications = angular.copy($scope.qualifications);
          $scope.downloadedData = true;
        });
      }

      function addNew(){
        $scope.qualifications.push({
          id: -1,
          label: "",
          value: 'POSITIVE',
          modificable: true
        });
      }

      function save(){
        var promises = [];
        angular.forEach($scope.qualifications, function(){
          var args = arguments;
          if(args[0].action === 'DEL'){
            if(args[0].id !== -1){
              promises.push($cnQualifications.remove(args[0]).then(function(){
                $scope.qualifications.splice(args[1], 1);  
              }, function(){
                delete $scope.qualifications[args[1]].action;  
              }));  
            }
          }else if(args[0].id === -1 || $filter('filter')(oldQualifications, {id: args[0].id})[0].label !== args[0].label ){
            promises.push($cnQualifications.save(args[0]).then(function(){
              $scope.qualifications[args[1]].id = arguments[0].id;  
            }));
          }
        });

        $q.all(promises).then(function(){
          $scope.card.openCard = false;
        });

      }

      function remove(){
        var args = arguments;
        $cnQualifications.getContactnets(args[0]).then(function(){
          if(!arguments[0].length)
            args[0].action = 'DEL';
          else{
            $mdToast.show(
              $mdToast.simple()
                .textContent('Cualificación en uso por '+arguments[0].length+' contactNet'+(arguments[0].length == 1 ? '' :'s') )
                .position('bottom left')
                .hideDelay(2500)
            );
          }
        });
        
      }


    }
  }


}());

},{}],48:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($timeout) {

    controller.$inject = ["$scope", "$cnSkills", "$filter", "$q", "$mdToast"];
  	var directiveObj = {
        restrict: 'EA',
        scope: {
          downloadedData: '=',
          card: '='
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/repos/directives/skills/skills.html',
      	controller: controller
    };

    return directiveObj;


    function link(scope, element, attr, ctrl) {

    }

    /* @ngInject */
    function controller ($scope, $cnSkills, $filter, $q, $mdToast) {

      var oldSkills = [];
    	$scope.skills = [];

    	$scope.addNew = addNew;
      $scope.remove = remove;
      $scope.save = save;

      init();

      function init(){
        $cnSkills.get().then(function(){
          $scope.skills = arguments[0];
          oldSkills = angular.copy($scope.skills);
          $scope.downloadedData = true;
        });
      }

    	function addNew(){
    		$scope.skills.push({
					id: -1,
					label: "",
          modificable: true
				});
    	}

      function save(){
        var promises = [];
        angular.forEach($scope.skills, function(){
          var args = arguments;
          if(args[0].action === 'DEL'){
            if(args[0].id !== -1){
              promises.push($cnSkills.remove(args[0]).then(function(){
                $scope.skills.splice(args[1], 1);  
              }, function(){
                delete $scope.skills[args[1]].action;  
              }));  
            }
          }else if(args[0].id === -1 || $filter('filter')(oldSkills, {id: args[0].id})[0].label !== args[0].label ){
            promises.push($cnSkills.save(args[0]).then(function(){
              $scope.skills[args[1]].id = arguments[0].id;  
            }));
          }
        });

        $q.all(promises).then(function(){
          $scope.card.openCard = false;
        });

      }

      function remove(){
        var args = arguments;
        $cnSkills.getContactnets(args[0]).then(function(){
          if(!arguments[0].length)
            args[0].action = 'DEL';
          else{
            $mdToast.show(
              $mdToast.simple()
                .textContent('Skill en uso por '+arguments[0].length+' contactNet'+(arguments[0].length == 1 ? '' :'s') )
                .position('bottom left')
                .hideDelay(2500)
            );
          }
        });
        
      }


    }
  }
  module.exports.$inject = ["$timeout"];


}());

},{}],49:[function(require,module,exports){
(function () {

	'use strict';

	module.exports = angular.module('cnRepos', [])
		.controller('reposController', require('./reposController.js'))
		.directive('cnRepoSkills', require('./directives/skills/skills.js'))
		.directive('cnRepoQualifications', require('./directives/qualifications/qualifications.js'))
		.directive('cnRepoPauseStates', require('./directives/pauseStates/pauseStates.js'))
		.directive('cnRepoCategorizations', require('./directives/categorizations/categorizations.js'))
	;
	
}());
},{"./directives/categorizations/categorizations.js":45,"./directives/pauseStates/pauseStates.js":46,"./directives/qualifications/qualifications.js":47,"./directives/skills/skills.js":48,"./reposController.js":50}],50:[function(require,module,exports){
(function(){
	'use strict';

  /* ngInject */
	module.exports = function($rootScope, $scope, $cnContactNets, $cnChannels, $filter, $cnRepos){

		$scope.repos = {};

		$scope.save = save;
		$scope.open = open;

		$rootScope.fab.hide = true;

    $cnRepos.get().then(function(){
      $scope.repos = arguments[0];
    });

 	
  	function open(){
  		$scope.repos[arguments[0]].downloadedData = false;
  		$scope.repos[arguments[0]].openCard = !$scope.repos[arguments[0]].openCard;
  	}

    function save(){
      console.log(arguments[0]);
    }


  }

}());

},{}],51:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnLanguages, $filter) {

  	var directive = {
        restrict: 'EA',
        scope: {
        	rule: '=cnRule',
					vocabulary: '=cnVocabulary'
        },
        templateUrl: '/contactNetConfig/modules/rules/directives/categorization/categorization.html',
        link: link
    };

    return directive;


    function link(scope, element, attr, ctrl) {

    	function init(){

    			console.log(attr);

    	}

    	init();

    }
  }
  module.exports.$inject = ["$cnLanguages", "$filter"];

}());

},{}],52:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnRules) {

    controller.$inject = ["$scope"];
  	var directiveObj = {
        restrict: 'EA',
        scope: {
          routingRule: '=cnRoutingRules',
					channelId: '=cnChannelId',
					vocabulary: '=cnVocabulary'
        },
        link: link,
        templateUrl: '/contactNetConfig/modules/rules/directives/routingRules/routingRules.html',
      	controller: controller
    };

    return directiveObj;


    function link(scope, element, attr, ctrl) {


    }

    /* @ngInject */
    function controller ($scope) {

    	$scope.addCategorization = addCategorization;

			function addCategorization(){
				arguments[0].rules.push({
					"evaluationMode": "1",
					"type": "21",
					"data": [{
						"Category_Id": "2",
						"Description": "Alta Orange"
					}],
					"multiRule": true
				});
			}

    }
  }
  module.exports.$inject = ["$cnRules"];


}());

},{}],53:[function(require,module,exports){
(function() {
	'use strict';

  /* @ngInject */
  module.exports = function ($cnLanguages, $filter) {

  	var directive = {
        restrict: 'EA',
        scope: {
        	rule: '=cnRule'
        },
        templateUrl: '/contactNetConfig/modules/rules/directives/selectLanguages/selectLanguages.html',
        link: link
    };

    return directive;


    function link(scope, element, attr, ctrl) {

    	scope.languages = [];
    	scope.toggleLanguage = toggleLanguage;

    	var routingRulesIndex = false;


    	function toggleLanguage(){
    		var language = angular.copy(arguments[0]);
    		if(language.selected){
	    		delete language.selected;
	    		scope.rule.rules[routingRulesIndex].data.push(language);
    		}else{
    			angular.forEach(scope.rule.rules[routingRulesIndex].data, function(){
    				if(arguments[0].Language_Id == language.Language_Id)
    					scope.rule.rules[routingRulesIndex].data.splice(arguments[1], 1);
    			});
    		}

    	}


    	function init(){

    		$cnLanguages.get().then(function(){
					scope.languages = arguments[0];

					angular.forEach(scope.languages, function(){
						var language = angular.copy(  $filter('filter')(scope.rule.rules[routingRulesIndex].data, {"Language_Id": arguments[0].Language_Id}) );
						if(language.length){
							scope.languages[arguments[1]].selected = true;
						}else{
							scope.languages[arguments[1]].selected = false;
						}
					});
	    	});

    		angular.forEach(scope.rule.rules, function(){
    			if(arguments[0].type == 20)
    				routingRulesIndex = arguments[1];
    		});

    		if(routingRulesIndex === false){
    			routingRulesIndex = scope.rule.rules.length;
    			scope.rule.rules.push({
    				"evaluationMode": "1",
						"type": "20",
						"data": [],
						"multiRule": true
    			});
    		}

    	}

    	init();

    }
  }
  module.exports.$inject = ["$cnLanguages", "$filter"];

}());

},{}],54:[function(require,module,exports){
(function() {
	'use strict';
	
  /* @ngInject */
  module.exports = function ($cnContactNets, $filter) {

  	var directive = {
        restrict: 'EA',
        scope: {
        	rule: '=cnRule',
					channelId: '=cnChannelId'
        },
        templateUrl: '/contactNetConfig/modules/rules/directives/selectOrderContactNet/selectOrderContactNet.html',
        link: link
    };

    return directive;


    function link(scope, element, attr, ctrl) {

    	var contactNetsRaw = [];

    	scope.contactNets = [];
    	scope.moveContactNet = moveContactNet;
    	scope.selectCN = selectCN;

    	$cnContactNets.get().then(function () {
        contactNetsRaw = arguments[0];

        orderContactNets();
      });


    	function orderContactNets(){
    		var contactNetsOrder = [];

    		angular.forEach(scope.rule.destinations, function(){

        	var contactNet = angular.copy( $filter('filter')(contactNetsRaw, {id: arguments[0]}) );
        	if(contactNet.length){
        		contactNet[0].selected = true;
      			contactNetsOrder.push(contactNet[0]);
        	}
        });

        angular.forEach(contactNetsRaw, function(){
        	if(!~scope.rule.destinations.indexOf(arguments[0].id)){
        		contactNetsOrder.push(arguments[0]);
        	}
        });



        scope.contactNets = contactNetsOrder;

    	}

    	function selectCN(){
    		if(arguments[0].selected){
    			scope.rule.destinations.push(arguments[0].id);
    		}else{
    			scope.rule.destinations.splice(scope.rule.destinations.indexOf(arguments[0].id), 1);
    		}

    		orderContactNets();
    	};

      /*
	    * @param {Object} contactNet
	    * @param {boolean} action true: up, false: down
	    */
	    function moveContactNet(){
	      var args = arguments;
	      var position = scope.rule.destinations.indexOf(arguments[0].id);

	      scope.rule.destinations.splice(position, 1);

	      if(arguments[1]){
					scope.rule.destinations.splice(position-1, 0, arguments[0].id);
	      }else{
	      	scope.rule.destinations.splice(position+1, 0, arguments[0].id);
	      }

	      orderContactNets();

	    }

    }
  }
  module.exports.$inject = ["$cnContactNets", "$filter"];

}());

},{}],55:[function(require,module,exports){
(function () {

	'use strict';

	module.exports = angular.module('cnRules', [])
		.controller('rulesController', require('./rulesController.js'))
		.directive('cnSelectOrderContactNet', require('./directives/selectOrderContactNet/selectOrderContactNet.js'))
		.directive('cnSelectLanguages', require('./directives/selectLanguages/selectLanguages.js'))
		.directive('cnRoutingRules', require('./directives/routingRules/routingRules.js'))
		.directive('cnCategorization', require('./directives/categorization/categorization.js'))
	;
	
}());
},{"./directives/categorization/categorization.js":51,"./directives/routingRules/routingRules.js":52,"./directives/selectLanguages/selectLanguages.js":53,"./directives/selectOrderContactNet/selectOrderContactNet.js":54,"./rulesController.js":56}],56:[function(require,module,exports){
(function(){
	'use strict';

  /* @ngInject */
  module.exports =  function ($rootScope, $scope, $cnContactNets, $cnRules, $filter, $cnChannels, $mdDialog){

  	$scope.contactNets = [];
    $scope.$cnRules = $cnRules;

    $rootScope.fab.trigger.action = addNew;
		$scope.addNew = addNew;

		$scope.addRoutingRule = addRoutingRule;
    $scope.save = save;
    $scope.duplicate = duplicate;
    $scope.remove = remove;

    
    if(!$scope.$cnRules.rules.length){
      $scope.loading = true;
    }

  	$cnRules.get().then(function () {
      $scope.$cnRules.rules = arguments[0];
      $scope.loading = false;
  	});


		function addRoutingRule(){
			arguments[0].routingRules.push({
				"name": 'nueva regla',
				"openCard": true,
				"destinations": [],
				"rules": []
			});
		}

    function addNew(){
      var args = arguments;
			$cnChannels.get().then(function(){
        if(arguments[0].length){
          $cnRules.rules.unshift({
            "id": (new Date()).getTime(),
            "newItem": true,
            "name": "Nuevo grupo de reglas",
            "downloadedData": true,
            "openCard": true,
            "configModificable": false,
            "modificable": true,
            "vocabulary": [],
            "routingRules": []
          });  
        }else{
          $mdDialog.show(
            $mdDialog.alert()
              .clickOutsideToClose(true)
              .title('Acción no permitida')
              .textContent('Para crear una regla es necesario tener al menos un canal creado.')
              .ariaLabel('Alert dialog')
              .ok('Cerrar')
              .targetEvent(args[0])
          );
        }          
      });
			
    }

    function save(){
      var args = arguments;
      if(args[0].newItem){
        args[0].id = -1;
      }
      $cnRules.save(arguments[0]).then(function(){
        arguments[0].downloadedData = true;
        args[0] = arguments[0];
      });
    }

    function remove(){
      var args = arguments;
      $cnRules.remove(arguments[0]).then(function(){
        $cnRules.rules.splice($cnRules.rules.indexOf(args[1]), 1);  
      });
    }

    function duplicate(){
      var args = arguments;
      //TODO: Input dialog asking for new config name
      $cnRules.duplicate(arguments[0].id, "Copia de "+arguments[0].name).then(function(){
        // arguments[0].openCard = true;
        arguments[0].downloadedData = true;
        $cnRules.rules.unshift(arguments[0]);
      });
    }


  }
  module.exports.$inject = ["$rootScope", "$scope", "$cnContactNets", "$cnRules", "$filter", "$cnChannels", "$mdDialog"];

}());

},{}]},{},[2]);
